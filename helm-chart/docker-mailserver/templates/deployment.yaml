---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  labels:
    app: {{ template "dockermailserver.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "dockermailserver.fullname" . }}
  namespace: {{ template "dockermailserver.fullname" . }}
spec:
  replicas: {{ default 2 .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ template "dockermailserver.fullname" . }}
      release: "{{ .Release.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: "RollingUpdate"
  template:
    metadata:
      annotations:
        ## Only scrape pods that have a value of `true`
        prometheus.io/scrape: {{ default "true" .Values.monitoring.pod.scrape | quote }}
        ## If the metrics path is not `/metrics` override this.
        prometheus.io/port: {{ default "9102" .Values.monitoring.pod.port | quote }}
        ## scrape the pod on the indicated port instead of the default of `9102`.
        prometheus.io/path: {{ default "metrics" .Values.monitoring.pod.path | quote }}
        ## Scrape the pod over protocol
        prometheus.io/scheme: {{ default "http" .Values.monitoring.pod.scheme | quote }}
        ##
        ## Oftentimes, applicatins need to be restarted once once their configuration has been updated. However,
        ## Kubernetes makes the assumption that watching the file for configuration change is the applications
        ## responsibiliy, and doesn't restart when files change. So, the lines below modify a propery that does trigger
        ## a rotation of the applications so they are restarted when their dependencies change.
        ##
        ## See https://github.com/kubernetes/helm/blob/master/docs/charts_tips_and_tricks.md
        ##   #automatically-roll-deployments-when-configmaps-or-secrets-change
        ##
        # checksum/config: {{ include (print $.Chart.Name "/templates/secret.yaml") . | sha256sum }}
        # checksum/config: {{ include (print $.Chart.Name "/templates/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "dockermailserver.fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      ## Volumes are how Kubernetes expresses either networked storage or other metadata in the filesystem. There are
      ## storage types, the most useful of which are illustrated below. Remember to uncomment the volumes: node if you
      ## decide to use them!
      ##
      volumes:
         - name: "data"
           persistentVolumeClaim:
             claimName: {{ template "dockermailserver.pvcName" . }}
         - name: "config"
           emptyDir: {}
      ##
      ## CONFIGMAP
      ##
         - name: "configmap"
           configMap:
             name: {{ template "dockermailserver.fullname" . }}
      ##
      ## Note: You can also use single files from a configmap, with a syntax called "subPath". An example is below:
      ##
      #   - name: "__VOLUME_NAME__"
      #     configMap:
      #       name: "__CONFIGMAP_NAME__"
      #       items:
      #         - key: "__ITEM_KEY__"
      #           path: "path/to/item"
      ##
      ## SECRET
      ##
         - name: "opendkim-keys"
           secret:
             secretName: {{ template "dockermailserver.fullname" . }}-opendkim-keys
         - name: "ssl-cert"
           secret:
             secretName: {{ template "dockermailserver.fullname" . }}-tls
      ##
      ## DOWNWARD API
      ##
      #   - name: "__VOLUME_NAME__"
      #     downwardAPI:
      #       items:
      #         - path: "labels"
      #           fieldRef:
      #             fieldPath: metadata.labels
      #         - path: "annotations"
      #           fieldRef:
      #             fieldPath: metadata.annotations
      # We use this init container to allow us to keep config in configmaps, but to let the files be read/write within the docker-mailserver container
      # If we don't do this, startup of the container fails because read-only files can't be modded with sed
      initContainers:
        - name: prep-config
          image: busybox:1.28
          command: [ 'sh', '-c', 'cp /tmp/configmaps/* /tmp/docker-mailserver -rfp']
          volumeMounts:
            - name: configmap
              subPath: postfix-accounts.cf
              mountPath: /tmp/configmaps/postfix-accounts.cf
              readOnly: true
            - name: configmap
              subPath: postfix-virtual.cf
              mountPath: /tmp/configmaps/postfix-virtual.cf
              readOnly: true
            - name: configmap
              subPath: SigningTable
              mountPath: /tmp/configmaps/opendkim/SigningTable
              readOnly: true
            - name: configmap
              subPath: KeyTable
              mountPath: /tmp/configmaps/opendkim/KeyTable
              readOnly: true
            - name: configmap
              subPath: TrustedHosts
              mountPath: /tmp/configmaps/opendkim/TrustedHosts
              readOnly: true
            - name: configmap
              subPath: postfix-main.cf
              mountPath: /tmp/configmaps/postfix-main.cf
              readOnly: true         
            - name: config
              mountPath: /tmp/docker-mailserver/
        
          
      containers:
        - name: phone-home-25
          image: funkypenguin/poor-mans-k8s-lb
          imagePullPolicy: Always
          env:
          - name: REPEAT_INTERVAL
            value: "300"
          - name: FRONTEND_PORT
            value: "25"
          - name: BACKEND_PORT
            value: "30025"
          - name: SEND_PROXY
            value: "send-proxy"            
          - name: NAME
            value: "docker-mailserver-smtp"
          - name: WEBHOOK
            value: "https://traefik.funkypenguin.co.nz:9000/hooks/update-haproxy"
          - name: WEBHOOK_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "dockermailserver.fullname" . }}-phonehome-webhook
                key: webhook_token.secret    
        - name: phone-home-587
          image: funkypenguin/poor-mans-k8s-lb
          imagePullPolicy: Always
          env:
          - name: REPEAT_INTERVAL
            value: "300"
          - name: FRONTEND_PORT
            value: "587"
          - name: BACKEND_PORT
            value: "30587"
          - name: SEND_PROXY
            value: "send-proxy"               
          - name: NAME
            value: "docker-mailserver-submission"
          - name: WEBHOOK
            value: "https://traefik.funkypenguin.co.nz:9000/hooks/update-haproxy"
          - name: WEBHOOK_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "dockermailserver.fullname" . }}-phonehome-webhook
                key: webhook_token.secret      
        - name: phone-home-465
          image: funkypenguin/poor-mans-k8s-lb
          imagePullPolicy: Always
          env:
          - name: REPEAT_INTERVAL
            value: "300"
          - name: FRONTEND_PORT
            value: "465"
          - name: BACKEND_PORT
            value: "30465"
          - name: NAME
            value: "docker-mailserver-smtps"
          - name: WEBHOOK
            value: "https://traefik.funkypenguin.co.nz:9000/hooks/update-haproxy"
          - name: WEBHOOK_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "dockermailserver.fullname" . }}-phonehome-webhook
                key: webhook_token.secret                                
        - name: phone-home-993
          image: funkypenguin/poor-mans-k8s-lb
          imagePullPolicy: Always
          env:
          - name: REPEAT_INTERVAL
            value: "300"
          - name: FRONTEND_PORT
            value: "993"
          - name: BACKEND_PORT
            value: "30993"
          - name: NAME
            value: "docker-mailserver-pop3"
          - name: WEBHOOK
            value: "https://traefik.funkypenguin.co.nz:9000/hooks/update-haproxy"
          - name: WEBHOOK_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "dockermailserver.fullname" . }}-phonehome-webhook
                key: webhook_token.secret      
        - name: dockermailserver
          ## Environment variables can be populated in a number of ways, including secrets, or just string values. Below
          ## are some examples for you to copy-paste. Remember to uncomment the `env` node!
          #
          env:
          {{- include "dockermailserver.upstream-env-variables" . | nindent 10 }}

          #
          ## An example of a simple key value pair
          #
          # - name: "FOO"
          #   value: "BAR"
          #
          ## An example of environment variables from a secret
          #
          # - name: "SECRET"
          #   valueFrom:
          #     secretKeyRef:
          #       name: __SECRET_NAME__
          #       key: __KEY_USED_IN_SECRET_NAME__
          #
          image: {{ .Values.pod.dockermailserver.image | quote }}
          #command: [ "/bin/sleep" ]
          #args: [ "1h" ]
          # args:
          #   - "command"
          #   - "line"
          #   - "arguments"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
            privileged: {{ default false .Values.pod.dockermailserver.securityContext.privileged }}
            capabilities:
              add:
                - "NET_ADMIN"
          volumeMounts:
            - name: config
              mountPath: /tmp/docker-mailserver
            - name: opendkim-keys
              mountPath: /tmp/docker-mailserver/opendkim/keys/example.com/mail.private
              subPath: mail.private
              readOnly: true
            - name: ssl-cert
              mountPath: /tmp/ssl
              readOnly: true              
            - name: data
              mountPath: /var/mail
              subPath: mail
            - name: data
              mountPath: /var/mail-state
              subPath: mail-state
            - name: configmap
              subPath: dovecot.cf
              mountPath: /etc/dovecot/conf.d/zz-custom.cf
              readOnly: true                   
          ## There are three types or readiness probes:
          ##
          ## More generally, a liveness probe is used to determine whether the application is "healthy" and should
          ## recieve traffic. Whereas, a readiness probe is used to determine whether the application has finished
          ## its boot and is now online
          ##
          ## - HTTP Liveness
          ## - TCP Liveness
          ## - Exec liveness
          ##
          ## Below are examples of each healthcheck type with descriptions of when to use them
          ##
          # livenessProbe:
            ##
            # tcpSocket:
            ##
            ## The "tcpSocket" health check is useful for when an application exposes a port, but there are no utilities
            ## to determine whether that application is healthy over that port. So, the fact the application is
            ## listening on that port is taken as a "proxy" health measure.
            ##
            ##
              # port: "__CONTAINER_PORT_NAME__"
              ## Number of seconds after the container has started before liveness probes are initiated.
              ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
              ##
            ##
            # exec:
            ##
            ## The "exec" healthcheck is useful when there is a bundled program to determine whether the application is
            ## healthy (such as "mysqladmin ping"). It is also useful if the application does not open a network port
            ## for communicating with other applications, but still represents its state on disk somehow.
            ##
              ## The command executed by exec is expected to return "0" to indicate healthy, and any nonzero status code
              ## to indicate unhealthy.
              # command:
                # - cat
                # - /tmp/healthy
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
            ##
            # httpGet:
            #
            ## As the name implies, the "httpGet" health check places a HTTP GET request to an endpoint defined by the
            ## the application. It seems to be the superior method of health checking where the application supports
            ## HTTP, as the semantics are known and usually reliable.
            ##
              ## The path that the HTTP GET request will be made to. Any code > 200 and < 400 is OK. Any other code is
              ## not OK
              ##
              # path: /healthz
              ##
              ## If the application exposes the health checking port on a non standard port, indicate here. Otherwise,
              ## use a named application port defined above.
              ##
              # port: "__CONTAINER_PORT_NAME__"
              ##
              ## Whether to connect using the "HTTP" or "HTTPS" protocol (i.e. whether to enscapsulate the connection in
              ## TLS.
              ##
              # scheme: "HTTP"
              ##
              ## Additional HTTP headers can be supplied to the HTTP health check to modify the behaviour, such as to
              ## supply a HOST header.
              ##
              # httpHeaders:
                # - name: "X-Custom-Header"
                #   value: "Awesome"
              ##
              ## How long to wait between probes
              ##
              # periodSeconds: 10
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
          ## The Readiness probe follows exactly the same syntax as the liveness probe, and the examples above can
          ## be reused.
          ##
          # readinessProbe:
          ##
          ## __LIVENESS_PROBE__
      ## Whether to restart this pod. Possible values are:
      ## - Always (Sensible Default)
      ## - OnFailure
      ## - Never
      ##
      ## For more information, see http://kubernetes.io/docs/user-guide/pod-states/#restartpolicy
      restartPolicy: "Always"
      securityContext:
        ## Volumes which support ownership management are modified to be owned and writable by the GID specified in
        ## fsGroup. See the Ownership Management design document for more details.
        ## See: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/
        ##      volume-ownership-management.md
        # fsGroup: 1000
        ## A list of groups applied to the first process run in each container, in addition to the container’s primary
        ## GID. If unspecified, no groups will be added to any container.
        # supplementalGroups: [1000]
