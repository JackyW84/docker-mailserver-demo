#! /bin/bash

# shellcheck disable=SC2094
# ? This is done to ignore the message "Make sure not to read and write
# ? the same file in the same pipeline", which is a result of ${DATABASE}
# ? being used below. (This disables the message file-wide.)

# shellcheck source=../scripts/helpers/index.sh
source /usr/local/bin/helpers/index.sh

function _main
{
  [[ ${1:-} == 'help' ]] && { __usage ; exit 0 ; }

  local MAILDEL='false'

  _validate_parameters ${*}
  _delete_accounts "${@}"
}

function __usage
{
  printf '%s' "${PURPLE}DELMAILUSER${RED}(${YELLOW}8${RED})

${ORANGE}NAME${RESET}
    delmailuser - delete a user and related data

${ORANGE}SYNOPSIS${RESET}
    ./setup.sh email del [ OPTIONS ] { <MAIL ACCOUNT> [<MAIL ACCOUNT>${RED}...${RESET}] ${RED}|${RESET} help }

${ORANGE}DESCRIPTION${RESET}
    Delete a mail user, aliases, quotas and mail data.

${ORANGE}OPTIONS${RESET}
    -y
        Indicate that ${LWHITE}all mail data${RESET} is to be deleted without another prompt.

    -h
        Show this help dialogue.

${ORANGE}EXAMPLES${RESET}
    ${LWHITE}./setup.sh email del woohoo@some-domain.org${RESET}
        Delete the mail user, quotas and aliases, but ask
        again whether mailbox data should be deleted.

    ${LWHITE}./setup.sh email del -y test@domain.com test@domain.com${RESET}
        Delete all mail data for the users 'test' and do not
        prompt to ask if all mail data should be deleted.

${ORANGE}EXIT STATUS${RESET}
    Exit status is 0 if command was successful, and 1 if there was an error.
"
}

function _validate_parameters
{
  [[ -z ${*} ]] && { __usage ; _exit_with_error 'No user specified' ; }

  while getopts ":yYh" OPT
  do
    case "${OPT}" in
      ( 'y' | 'Y' )
        MAILDEL=true
        ;;

      ( 'h' )
        __usage
        exit 0
        ;;

      ( * )
        __usage
        _exit_with_error "The option '${OPT}' is unknown"
        ;;

    esac
  done
  shift $((OPTIND-1))

  if ! ${MAILDEL}
  then
    read -r -p "Do you want to delete the mailbox as well (removing all mails)? [Y/n] " MAILDEL_CHOSEN
    if [[ ${MAILDEL_CHOSEN} =~ (y|Y|yes|Yes) ]] || [[ -z ${MAILDEL_CHOSEN} ]]
    then
      MAILDEL=true
    fi
  fi
}

function _remove_entry_from_databases
{
  # ${_MAIL_ACCOUNT_} must not contain /s and other syntactic characters
  local _MAIL_ACCOUNT_=$(_escape "${MAIL_ACCOUNT}")

  if [[ -f ${DATABASE_ACCOUNTS} ]]
  then
    if ! sedfile --strict -i "/^${_MAIL_ACCOUNT_}|/d" "${DATABASE_ACCOUNTS}"
    then
      _exit_with_error "'${MAIL_ACCOUNT}' could not be deleted in '${DATABASE_ACCOUNTS}'"
    fi
  fi

  if [[ -f ${DATABASE_VIRTUAL} ]]
  then
    # delete all aliases where the user is the only recipient( " ${_MAIL_ACCOUNT_}" )
    # delete user only for all aliases that deliver to multiple recipients ( ",${_MAIL_ACCOUNT_}" "${_MAIL_ACCOUNT_,}" )
    if sed -i \
      -e "/ ${_MAIL_ACCOUNT_}$/d" -e "s/,${_MAIL_ACCOUNT_}//g" -e "s/${_MAIL_ACCOUNT_},//g" \
      "${DATABASE_VIRTUAL}"
    then
      _log 'info' "'${MAIL_ACCOUNT}' and potential aliases deleted"
    else
      _exit_with_error "Aliases for '${MAIL_ACCOUNT}' could not be deleted in '${DATABASE_VIRTUAL}'"
    fi
  fi

  # remove quota directives
  if [[ -f ${DATABASE_QUOTA} ]]
  then
    if ! sedfile --strict -i -e "/^${_MAIL_ACCOUNT_}:.*$/d" "${DATABASE_QUOTA}"
    then
      _log 'warn' "Quota for '${MAIL_ACCOUNT}' could not be deleted in '${DATABASE_QUOTA}'"
    fi
  fi
}

function _remove_maildir
{
  local USER="${MAIL_ACCOUNT%@*}"
  local DOMAIN="${MAIL_ACCOUNT#*@}"

  if ! ${MAILDEL}
  then
    echo 'Leaving the mailbox untouched.'
    echo "If you want to delete it at a later point use 'sudo docker exec mailserver rm -R /var/mail/${DOMAIN}/${USER}'"
    exit 0
  fi

  if [[ -e "/var/mail/${DOMAIN}/${USER}" ]]
  then
    if rm -R "/var/mail/${DOMAIN}/${USER}"
    then
      _log 'info' 'Mailbox deleted'
    else
      _exit_with_error 'Mailbox could not be deleted'
    fi
    rmdir "/var/mail/${DOMAIN}" &>/dev/null
  else
    _exit_with_error "Mailbox directory '/var/mail/${DOMAIN}/${USER}' did not exist"
  fi
}

function _delete_accounts
{
  local DATABASE_ACCOUNTS='/tmp/docker-mailserver/postfix-accounts.cf'
  local DATABASE_VIRTUAL='/tmp/docker-mailserver/postfix-virtual.cf'
  local DATABASE_QUOTA='/tmp/docker-mailserver/dovecot-quotas.cf'

  [[ -s ${DATABASE_ACCOUNTS} ]] || exit 0

  _create_lock # Protect config file with lock to avoid race conditions

  for MAIL_ACCOUNT in "${@}"
  do
    _remove_entry_from_databases
    _remove_maildir
  done
}

_main "${@}"
