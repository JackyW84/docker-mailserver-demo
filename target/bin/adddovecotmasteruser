#! /bin/bash

# shellcheck disable=SC2094

# shellcheck source=../scripts/helpers/index.sh
source /usr/local/bin/helpers/index.sh

function __usage
{
  printf '%s' "${PURPLE}ADDDOVECOTMASTERUSER${RED}(${YELLOW}8${RED})

${ORANGE}NAME${RESET}
    addmasteruser - add a dovecot master user (for POP3/IMAP administration)

${ORANGE}SYNOPSIS${RESET}
    ./setup.sh dovecot-master add <USERNAME> [<PASSWORD>]

${ORANGE}OPTIONS${RESET}
    ${BLUE}Generic Program Information${RESET}
        help       Print the usage information.

${ORANGE}EXAMPLES${RESET}
    ${LWHITE}./setup.sh dovecot-master add test-user${RESET}
        Add the dovecot master account 'test-user'. You will be prompted
        to input a password afterwards since no password was supplied.

${ORANGE}EXIT STATUS${RESET}
    Exit status is 0 if command was successful. If wrong arguments are provided
    or arguments contain errors, the script will exit early with exit status 1.

"
}

function _validate_parameters
{
  [[ -z ${USERNAME} ]] && { __usage ; _exit_with_error 'No username specified' ; }
}

# TODO: Variable names can be adjusted synced to `bin/addmailuser`, only other
# difference is DATABASE value and not waiting on account maildir creation.
function _add_dovecot_master_account
{
  local DATABASE='/tmp/docker-mailserver/dovecot-masters.cf'
  touch "${DATABASE}"
  _create_lock # Protect config file with lock to avoid race conditions

  # Escaped values for use in regex patterns:
  local _USERNAME_=$(_escape "${USERNAME}")

  function _account_already_exists
  {
    # `|` is a delimter between the account identity (_USERNAME_) and the hashed password
    grep -qi "^${_USERNAME_}|" "${DATABASE}" 2>/dev/null
  }

  function _hash_password
  {
    # If no password was provided, request one interactively:
    if [[ -z ${PASSWD} ]]
    then
      read -r -s -p 'Enter Password: ' PASSWD
      echo
      [[ -z ${PASSWD} ]] && _exit_with_error 'Password must not be empty'
    fi

    # Create the hashed password, then add an account entry into the DATABASE:
    local HASH=$(doveadm pw -s SHA512-CRYPT -u "${USERNAME}" -p "${PASSWD}")
    echo "${USERNAME}|${HASH}" >> "${DATABASE}"
  }

  if _account_already_exists
  then
    _exit_with_error "User '${USERNAME}' already exists"
  fi

  _hash_password
}

[[ ${1:-} == 'help' ]] && { __usage ; exit 0 ; }

USERNAME="${1}"
shift
PASSWD="${*}"

_validate_parameters
_add_dovecot_master_account
