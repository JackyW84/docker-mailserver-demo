#! /bin/bash

KEYSIZE=4096
SELECTOR=mail
DOMAINS=

function __usage
{
  cat << END
Generate DKIM Configuration

SYNOPSIS
    ./setup.sh dkim [OPTIONS...] [LDAP DOMAINS]

DESCRIPTION
    Configures DKIM keys. OPTIONS can be used to configure a more complex setup. LDAP setups require these options.

OPTIONS
    Generic Program Information
        help       Print the usage information.

    Configuration adjustments
        size       Set the size of the keys to be generated. Possible are 1024, 2024 and 4096 (default).
        selector   Set a manual selector (default is "mail") for the key. (ATTENTION: NOT IMPLEMENTED YET!)

LDAP DOMAINS:
        domains    Provide the domains for which keys are to be generated.

END
}

if [[ ${1} == 'help' ]]
then
  __usage
  exit 0
fi

while [[ ${#} -gt 0 ]]
do
  case ${1} in
    size )
      if [[ -n ${2+'set'} ]]
      then
        KEYSIZE="${2}"
        shift
        shift
      else
        echo "No keysize provided after 'size' argument. Aborting." >&2
        exit 1
      fi
      ;;

    selector )
      if [[ -n ${2+'set'} ]]
      then
        # shellcheck disable=SC2034
        SELECTOR="${2}"
        shift
        shift
      else
        echo "No selector provided after 'selector' argument. Aborting." >&2
        exit 1
      fi
      ;;

    domain )
      shift
      if [[ -n ${*+'set'} ]]
      then
        DOMAINS="${*}"
        break
      else
        echo "No domain(s) provided after 'domain' argument. Aborting." >&2
        exit 1
      fi
      ;;

    * )
      __usage
      echo -e "\nUnknown options ${1} ${2:-}. Aborting." >&2
      exit 1
      ;;

  esac
done

touch /tmp/vhost.dkim.tmp

if [[ -z ${DOMAINS} ]]
then
  # getting domains FROM mail accounts
  if [[ -f /tmp/docker-mailserver/postfix-accounts.cf ]]
  then
    # shellcheck disable=SC2034
    while IFS=$'|' read -r LOGIN PASS
    do
      DOMAIN=$(echo "${LOGIN}" | cut -d @ -f2)
      echo "${DOMAIN}" >>/tmp/vhost.dkim.tmp
    done < <(grep -v "^\s*$\|^\s*\#" /tmp/docker-mailserver/postfix-accounts.cf || true)
  fi

  # getting domains FROM mail aliases
  if [[ -f /tmp/docker-mailserver/postfix-virtual.cf ]]
  then
    # shellcheck disable=SC2034
    while read -r FROM TO
    do
      UNAME=$(echo "${FROM}" | cut -d @ -f1)
      DOMAIN=$(echo "${FROM}" | cut -d @ -f2)

      [[ ${UNAME} != "${DOMAIN}" ]] && echo "${DOMAIN}" >>/tmp/vhost.dkim.tmp
    done < <(grep -v "^\s*$\|^\s*\#" /tmp/docker-mailserver/postfix-virtual.cf || true)
  fi
else
  tr ',' '\n' <<< "${DOMAINS}" > /tmp/vhost.dkim.tmp
fi

sort < /tmp/vhost.dkim.tmp | uniq >/tmp/vhost
rm /tmp/vhost.dkim.tmp

if [[ ! -s /tmp/vhost ]]
then
  echo "No entries found, no keys to make."
  exit 0
fi

while read -r DOMAINNAME
do
  mkdir -p "/tmp/docker-mailserver/opendkim/keys/${DOMAINNAME}"

  if [[ ! -f "/tmp/docker-mailserver/opendkim/keys/${DOMAINNAME}/mail.private" ]]
  then
    echo "Creating DKIM private key /tmp/docker-mailserver/opendkim/keys/${DOMAINNAME}/mail.private"

    opendkim-genkey \
      --bits="${KEYSIZE}" \
      --subdomains \
      --DOMAIN="${DOMAINNAME}" \
      --selector=mail \
      -D "/tmp/docker-mailserver/opendkim/keys/${DOMAINNAME}"
  fi

  # write to KeyTable if necessary
  KEYTABLEENTRY="mail._domainkey.${DOMAINNAME} ${DOMAINNAME}:mail:/etc/opendkim/keys/${DOMAINNAME}/mail.private"
  if [[ ! -f "/tmp/docker-mailserver/opendkim/KeyTable" ]]
  then
    echo "Creating DKIM KeyTable"
    echo "${KEYTABLEENTRY}" >/tmp/docker-mailserver/opendkim/KeyTable
  else
    if ! grep -q "${KEYTABLEENTRY}" "/tmp/docker-mailserver/opendkim/KeyTable"
    then
      echo "${KEYTABLEENTRY}" >>/tmp/docker-mailserver/opendkim/KeyTable
    fi
  fi

  # write to SigningTable if necessary
  SIGNINGTABLEENTRY="*@${DOMAINNAME} mail._domainkey.${DOMAINNAME}"
  if [[ ! -f /tmp/docker-mailserver/opendkim/SigningTable ]]
  then
    echo "Creating DKIM SigningTable"
    echo "*@${DOMAINNAME} mail._domainkey.${DOMAINNAME}" >/tmp/docker-mailserver/opendkim/SigningTable
  else
    if ! grep -q "${SIGNINGTABLEENTRY}" /tmp/docker-mailserver/opendkim/SigningTable
    then
      echo "${SIGNINGTABLEENTRY}" >>/tmp/docker-mailserver/opendkim/SigningTable
    fi
  fi
done < <(grep -vE '^(\s*$|#)' /tmp/vhost)

# create TrustedHosts if missing
if [[ -d /tmp/docker-mailserver/opendkim ]] && [[ ! -f /tmp/docker-mailserver/opendkim/TrustedHosts ]]
then
  echo "Creating DKIM TrustedHosts"
  echo "127.0.0.1" >/tmp/docker-mailserver/opendkim/TrustedHosts
  echo "localhost" >>/tmp/docker-mailserver/opendkim/TrustedHosts
fi
