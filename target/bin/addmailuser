#! /bin/bash

# shellcheck source=../scripts/helpers/index.sh
source /usr/local/bin/helpers/index.sh

source ./common/helper.sh
source ./common/account.sh

function _main
{
  [[ ${1:-} == 'help' ]] && { __usage ; exit 0 ; }

  local MAIL_ACCOUNT="${1}"
  shift
  local PASSWD="${*}"

  _validate_parameters

  local DATABASE_ACCOUNTS='/tmp/docker-mailserver/postfix-accounts.cf'
  _account_add_to_db "${MAIL_ACCOUNT}" "${PASSWD}" "${DATABASE_ACCOUNTS}"

  # Change Detection will be triggered from DATABASE update via _add_account,
  # block until processed (actual account creation handled there):
  _wait_until_account_maildir_exists
}

function __usage
{
  printf '%s' "${PURPLE}addmailuser${RED}(${YELLOW}8${RED})

${ORANGE}USAGE${RESET}
    ./setup.sh email add <MAIL ACCOUNT> [<PASSWORD>]

${ORANGE}OPTIONS${RESET}
    ${BLUE}Generic Program Information${RESET}
        help       Print the usage information.

${ORANGE}DESCRIPTION${RESET}
    Add a new mail account (email address).

    To avoid a password being logged in the command history of your shell,
    you may omit it, you'll be prompted to input the password instead.

${ORANGE}EXAMPLES${RESET}
    ${LWHITE}./setup.sh email add user@example.com${RESET}
        Create the email account 'user@example.com'.

        You will be prompted to input a password afterwards since no password was supplied.

${ORANGE}EXIT STATUS${RESET}
    Exit status is 0 if command was successful. If wrong arguments are provided
    or arguments contain errors, the script will exit early with exit status 1.

"
}

function _validate_parameters
{
  _arg_expect_mail_account_has_local_and_domain_parts
}

_main "${@}"
