#! /bin/bash

# shellcheck disable=SC2094

# shellcheck source=../scripts/helpers/index.sh
source /usr/local/bin/helpers/index.sh

function __usage
{
  printf '%s' "${PURPLE}ADDMAILUSER${RED}(${YELLOW}8${RED})

${ORANGE}NAME${RESET}
    addmailuser - add an email address (i.e. a user)

${ORANGE}SYNOPSIS${RESET}
    ./setup.sh email add <EMAIL ADDRESS> [<PASSWORD>]

${ORANGE}OPTIONS${RESET}
    ${BLUE}Generic Program Information${RESET}
        help       Print the usage information.

${ORANGE}EXAMPLES${RESET}
    ${LWHITE}./setup.sh email add test@domain.tld${RESET}
        Add the email account test@domain.tld. You will be prompted
        to input a password afterwards since no password was supplied.

${ORANGE}EXIT STATUS${RESET}
    Exit status is 0 if command was successful. If wrong arguments are provided
    or arguments contain errors, the script will exit early with exit status 1.

"
}

function _validate_parameters
{
  [[ -z ${FULL_EMAIL} ]] && { __usage ; _exit_with_error 'No username specified' ; }
  [[ ${FULL_EMAIL} =~ .*\@.* ]] || { __usage ; _exit_with_error 'Username must include the domain' ; }
}

function _add_account
{
  local DATABASE='/tmp/docker-mailserver/postfix-accounts.cf'
  touch "${DATABASE}"
  _create_lock # Protect config file with lock to avoid race conditions

  # Escaped values for use in regex patterns:
  local _EMAIL_=$(_escape "${FULL_EMAIL}")

  function _account_already_exists
  {
    # `|` is a delimter between the account identity (_EMAIL_) and the hashed password
    grep -qi "^${_EMAIL_}|" "${DATABASE}" 2>/dev/null
  }

  function _hash_password
  {
    # If no password was provided, request one interactively:
    if [[ -z ${PASSWD} ]]
    then
      read -r -s -p 'Enter Password: ' PASSWD
      echo
      [[ -z ${PASSWD} ]] && _exit_with_error 'Password must not be empty'
    fi

    # Create the hashed password, then add an account entry into the DATABASE:
    local HASH=$(doveadm pw -s SHA512-CRYPT -u "${FULL_EMAIL}" -p "${PASSWD}")
    echo "${FULL_EMAIL}|${HASH}" >> "${DATABASE}"
  }

  if _account_already_exists
  then
    _exit_with_error "User '${FULL_EMAIL}' already exists"
  fi

  _hash_password
}

# Tests fail if the creation of /var/mail/${DOMAIN}/${USER} doesn't happen fast enough after addmailuser executes (check-for-changes.sh race-condition)
# Prevent infinite loop in tests like "checking accounts: user3 should have been added to /tmp/docker-mailserver/postfix-accounts.cf even when that file does not exist"
function _wait_until_account_maildir_exists
{
  if [[ -e ${CHKSUM_FILE} ]]
  then
    local USER="${FULL_EMAIL%@*}"
    local DOMAIN="${FULL_EMAIL#*@}"

    while [[ ! -d "/var/mail/${DOMAIN}/${USER}" ]]
    do
      _log 'info' "Waiting for dovecot to create '/var/mail/${DOMAIN}/${USER}/'"
      sleep 1
    done
  fi
}

[[ ${1:-} == 'help' ]] && { __usage ; exit 0 ; }

FULL_EMAIL="${1}"
shift
PASSWD="${*}"

_validate_parameters
_add_account
# Change Detection will be triggered from DATABASE update via _add_account,
# block until processed (actual account creation handled there):
_wait_until_account_maildir_exists
