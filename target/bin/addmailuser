#! /bin/bash

# shellcheck source=../scripts/helpers/index.sh
source /usr/local/bin/helpers/index.sh

source ./common/accounts/add-account.sh

function _main
{
  [[ ${1:-} == 'help' ]] && { __usage ; exit 0 ; }

  local MAIL_ACCOUNT="${1}"
  shift
  local PASSWD="${*}"

  _validate_parameters
  _add_account_to_db '/tmp/docker-mailserver/postfix-accounts.cf'
  # Change Detection will be triggered from DATABASE update via _add_account,
  # block until processed (actual account creation handled there):
  _wait_until_account_maildir_exists
}

function __usage
{
  printf '%s' "${PURPLE}ADDMAILUSER${RED}(${YELLOW}8${RED})

${ORANGE}NAME${RESET}
    addmailuser - add an email address (i.e. a user)

${ORANGE}SYNOPSIS${RESET}
    ./setup.sh email add <MAIL ACCOUNT> [<PASSWORD>]

${ORANGE}OPTIONS${RESET}
    ${BLUE}Generic Program Information${RESET}
        help       Print the usage information.

${ORANGE}EXAMPLES${RESET}
    ${LWHITE}./setup.sh email add test@domain.tld${RESET}
        Add the email account test@domain.tld. You will be prompted
        to input a password afterwards since no password was supplied.

${ORANGE}EXIT STATUS${RESET}
    Exit status is 0 if command was successful. If wrong arguments are provided
    or arguments contain errors, the script will exit early with exit status 1.

"
}

function _validate_parameters
{
  [[ -z ${MAIL_ACCOUNT} ]] && { __usage ; _exit_with_error 'No username specified' ; }
  [[ ${MAIL_ACCOUNT} =~ .*\@.* ]] || { __usage ; _exit_with_error 'Username must include the domain' ; }
}

_main "${@}"
