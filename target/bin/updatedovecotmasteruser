#! /bin/bash

# ? This is done to ignore the message "Make sure not to read and write
# ? the same file in the same pipeline", which is a result of ${DATABASE}
# ? being used below. (This disables the message file-wide.)
# shellcheck disable=SC2094

# shellcheck source=../scripts/helpers/index.sh
source /usr/local/bin/helpers/index.sh

function __usage { echo 'Usage: updatedovecotmasteruser <MAIL ACCOUNT> [PASSWORD]' ; }

function _validate_parameters
{
  [[ -z ${MAIL_ACCOUNT} ]] && { __usage ; _exit_with_error 'No username specified' ; }
}

function _update_dovecot_master_account_password
{
  local DATABASE_DOVECOT_MASTERS='/tmp/docker-mailserver/dovecot-masters.cf'
  touch "${DATABASE_DOVECOT_MASTERS}"
  _create_lock # Protect config file with lock to avoid race conditions

  # Escaped values for use in regex patterns:
  local _MAIL_ACCOUNT_=$(_escape "${MAIL_ACCOUNT}")

  function _account_already_exists
  {
    # `|` is a delimter between the account identity (_MAIL_ACCOUNT_) and the hashed password
    grep -qi "^${_MAIL_ACCOUNT_}|" "${DATABASE_DOVECOT_MASTERS}" 2>/dev/null
  }

  function _hash_password
  {
    if [[ -z ${PASSWD} ]]
    then
      read -r -s -p 'Enter Password: ' PASSWD
      echo
      [[ -z ${PASSWD} ]] && _exit_with_error 'Password must not be empty'
    fi

    # Create the hashed password, then update an account password in the DATABASE:
    local HASH=$(doveadm pw -s SHA512-CRYPT -u "${MAIL_ACCOUNT}" -p "${PASSWD}")
    sed -i "s ^""${MAIL_ACCOUNT}""|.* ""${MAIL_ACCOUNT}""|""${HASH}"" " "${DATABASE_DOVECOT_MASTERS}"
  }

  if ! _account_already_exists
  then
    _exit_with_error "Master user '${MAIL_ACCOUNT}' does not exist"
  fi

  _hash_password
}

MAIL_ACCOUNT="${1}"
shift
PASSWD="${*}"

_validate_parameters
_update_dovecot_master_account_password
